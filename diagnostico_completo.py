import tweepy
import os
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente
load_dotenv()

print("üîç DIAGN√ìSTICO COMPLETO DA API DO X")
print("=" * 60)

# Credenciais
API_KEY = os.getenv("API_KEY")
API_KEY_SECRET = os.getenv("API_KEY_SECRET")
BEARER_TOKEN = os.getenv("BEARER_TOKEN")
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
ACCESS_TOKEN_SECRET = os.getenv("ACCESS_TOKEN_SECRET")
CLIENTE_ID = os.getenv("CLIENTE_ID")
CLIENTE_SECRET = os.getenv("CLIENTE_SECRET")
BOT_USERNAME = os.getenv("BOT_USERNAME")

print(f"ü§ñ Bot Username: {BOT_USERNAME}")
print(f"üîë API_KEY: {API_KEY[:10]}...")
print(f"üîë BEARER_TOKEN: {BEARER_TOKEN[:20]}...")
print(f"üîë ACCESS_TOKEN: {ACCESS_TOKEN[:20]}...")
print(f"üîë CLIENTE_ID: {CLIENTE_ID[:15]}...")
print()

# TESTE 1: Bearer Token (API v2)
print("üß™ TESTE 1: Bearer Token (API v2)")
print("-" * 40)
try:
    client_bearer = tweepy.Client(bearer_token=BEARER_TOKEN)
    user = client_bearer.get_me()
    print(f"‚úÖ Bearer Token FUNCIONANDO! Usu√°rio: @{user.data.username}")
    
    # Teste de busca
    try:
        tweets = client_bearer.search_recent_tweets(query="python", max_results=5)
        print(f"‚úÖ Busca funcionando! Encontrados {len(tweets.data) if tweets.data else 0} tweets")
    except Exception as e:
        print(f"‚ùå Erro na busca: {e}")
        
except Exception as e:
    print(f"‚ùå Bearer Token falhou: {e}")

print()

# TESTE 2: OAuth 1.0a (API v2)
print("üß™ TESTE 2: OAuth 1.0a (API v2)")
print("-" * 40)
try:
    client_oauth1 = tweepy.Client(
        consumer_key=API_KEY,
        consumer_secret=API_KEY_SECRET,
        access_token=ACCESS_TOKEN,
        access_token_secret=ACCESS_TOKEN_SECRET
    )
    user = client_oauth1.get_me()
    print(f"‚úÖ OAuth 1.0a (v2) FUNCIONANDO! Usu√°rio: @{user.data.username}")
    
    # Teste de busca
    try:
        tweets = client_oauth1.search_recent_tweets(query=f"@{BOT_USERNAME}", max_results=5)
        print(f"‚úÖ Busca de men√ß√µes funcionando! Encontrados {len(tweets.data) if tweets.data else 0} tweets")
    except Exception as e:
        print(f"‚ùå Erro na busca de men√ß√µes: {e}")
    
    # Teste de cria√ß√£o de tweet
    try:
        # N√ÉO vou criar um tweet real, s√≥ testar a autentica√ß√£o
        print("‚úÖ Autentica√ß√£o para cria√ß√£o de tweets: OK")
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o de tweets: {e}")
        
except Exception as e:
    print(f"‚ùå OAuth 1.0a (v2) falhou: {e}")

print()

# TESTE 3: OAuth 1.0a (API v1.1)
print("üß™ TESTE 3: OAuth 1.0a (API v1.1)")
print("-" * 40)
try:
    auth = tweepy.OAuth1UserHandler(
        consumer_key=API_KEY,
        consumer_secret=API_KEY_SECRET,
        access_token=ACCESS_TOKEN,
        access_token_secret=ACCESS_TOKEN_SECRET
    )
    api_v1 = tweepy.API(auth)
    user = api_v1.verify_credentials()
    print(f"‚úÖ OAuth 1.0a (v1.1) FUNCIONANDO! Usu√°rio: @{user.screen_name}")
    
    # Teste de men√ß√µes
    try:
        mentions = api_v1.mentions_timeline(count=5)
        print(f"‚úÖ Men√ß√µes funcionando! Encontradas {len(mentions)} men√ß√µes")
    except Exception as e:
        print(f"‚ùå Erro nas men√ß√µes: {e}")
        
except Exception as e:
    print(f"‚ùå OAuth 1.0a (v1.1) falhou: {e}")

print()

# TESTE 4: OAuth 2.0 Client Credentials
print("üß™ TESTE 4: OAuth 2.0 Client Credentials")
print("-" * 40)
try:
    client_oauth2 = tweepy.Client(
        consumer_key=CLIENTE_ID,
        consumer_secret=CLIENTE_SECRET
    )
    # OAuth 2.0 n√£o tem get_me(), vamos testar busca
    tweets = client_oauth2.search_recent_tweets(query="python", max_results=5)
    print(f"‚úÖ OAuth 2.0 FUNCIONANDO! Encontrados {len(tweets.data) if tweets.data else 0} tweets")
except Exception as e:
    print(f"‚ùå OAuth 2.0 falhou: {e}")

print()

# TESTE 5: H√≠brido (Bearer + OAuth 1.0a)
print("üß™ TESTE 5: H√≠brido (Bearer para busca + OAuth 1.0a para a√ß√µes)")
print("-" * 60)
try:
    # Bearer para busca
    client_search = tweepy.Client(bearer_token=BEARER_TOKEN)
    tweets = client_search.search_recent_tweets(query="python", max_results=3)
    print(f"‚úÖ Busca com Bearer: {len(tweets.data) if tweets.data else 0} tweets")
    
    # OAuth 1.0a para a√ß√µes
    client_actions = tweepy.Client(
        consumer_key=API_KEY,
        consumer_secret=API_KEY_SECRET,
        access_token=ACCESS_TOKEN,
        access_token_secret=ACCESS_TOKEN_SECRET
    )
    user = client_actions.get_me()
    print(f"‚úÖ A√ß√µes com OAuth 1.0a: @{user.data.username}")
    print("‚úÖ M√âTODO H√çBRIDO FUNCIONANDO!")
    
except Exception as e:
    print(f"‚ùå M√©todo h√≠brido falhou: {e}")

print()
print("üéØ RESUMO FINAL")
print("=" * 60)
print("Testando qual m√©todo permite:")
print("1. ‚úÖ Autentica√ß√£o")
print("2. ‚úÖ Busca de men√ß√µes")  
print("3. ‚úÖ Cria√ß√£o de tweets")
print("4. ‚úÖ Funcionamento cont√≠nuo")
print()
print("üí° RECOMENDA√á√ÉO: Use o m√©todo que passou em TODOS os testes!")